version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_IA_API_URL=http://localhost:8000
      - NEXT_PUBLIC_CONTACT_EMAIL=dev@lavidaluca.fr
      - NEXT_PUBLIC_CONTACT_PHONE=+33123456789
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - backend
      - supabase

  backend:
    build:
      context: ./apps/ia
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - ALLOWED_ORIGINS=http://localhost:3000
      - SUPABASE_URL=http://localhost:54321
      - SUPABASE_KEY=${SUPABASE_SERVICE_KEY}
    volumes:
      - ./apps/ia:/app
    depends_on:
      - supabase
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  supabase:
    image: supabase/supabase:latest
    ports:
      - "54321:8000"
      - "54323:3000"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - ANON_KEY=${SUPABASE_ANON_KEY}
      - SERVICE_ROLE_KEY=${SUPABASE_SERVICE_KEY}
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./infra/supabase:/docker-entrypoint-initdb.d

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=lavidaluca
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/supabase/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./infra/supabase/seeds.sql:/docker-entrypoint-initdb.d/02-seeds.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  supabase_data:
  redis_data: