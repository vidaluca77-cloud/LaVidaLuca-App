version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: lavidaluca_postgres
    environment:
      POSTGRES_DB: lavidaluca_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lavidaluca-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: lavidaluca_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lavidaluca-network

  # FastAPI Backend
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: lavidaluca_backend
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/lavidaluca_dev
      - REDIS_URL=redis://redis:6379
    ports:
      - "8000:8000"
    volumes:
      - ./apps/backend:/app
      - backend_cache:/app/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lavidaluca-network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.dev
    container_name: lavidaluca_frontend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - lavidaluca-network
    restart: unless-stopped

  # IA Service
  ia-service:
    build:
      context: ./apps/ia
      dockerfile: Dockerfile
    container_name: lavidaluca_ia
    environment:
      - ENVIRONMENT=development
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8001:8001"
    volumes:
      - ./apps/ia:/app
    networks:
      - lavidaluca-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  backend_cache:

networks:
  lavidaluca-network:
    driver: bridge