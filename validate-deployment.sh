#!/bin/bash

# Script de validation de la configuration de d√©ploiement
# Usage: ./validate-deployment.sh

echo "üöÄ Validation de la configuration de d√©ploiement La Vida Luca"
echo "============================================================"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction de v√©rification
check_file() {
    if [ -f "$1" ]; then
        echo -e "${GREEN}‚úì${NC} $1 existe"
        return 0
    else
        echo -e "${RED}‚úó${NC} $1 manquant"
        return 1
    fi
}

# Fonction de v√©rification JSON
check_json() {
    if command -v jq >/dev/null 2>&1; then
        if jq empty "$1" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úì${NC} $1 est un JSON valide"
            return 0
        else
            echo -e "${RED}‚úó${NC} $1 contient du JSON invalide"
            return 1
        fi
    else
        echo -e "${YELLOW}‚ö†${NC} jq non install√©, impossible de valider $1"
        return 0
    fi
}

echo -e "\nüìÅ V√©rification des fichiers de configuration..."

# V√©rifier les fichiers de configuration
errors=0

check_file "vercel.json" && check_json "vercel.json" || errors=$((errors+1))
check_file "apps/backend/render.yaml" || errors=$((errors+1))
check_file "DEPLOYMENT.md" || errors=$((errors+1))
check_file "package.json" && check_json "package.json" || errors=$((errors+1))
check_file "next.config.js" || errors=$((errors+1))

echo -e "\nüì¶ V√©rification des d√©pendances..."

# V√©rifier si les d√©pendances sont install√©es
if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úì${NC} node_modules existe"
else
    echo -e "${RED}‚úó${NC} node_modules manquant - ex√©cuter 'npm install'"
    errors=$((errors+1))
fi

echo -e "\nüîß V√©rification des scripts package.json..."

# V√©rifier les scripts essentiels
required_scripts=("build" "start" "lint" "backend:dev" "backend:test" "deploy:check")

for script in "${required_scripts[@]}"; do
    if npm run | grep -q "$script"; then
        echo -e "${GREEN}‚úì${NC} Script '$script' disponible"
    else
        echo -e "${RED}‚úó${NC} Script '$script' manquant"
        errors=$((errors+1))
    fi
done

echo -e "\n‚öôÔ∏è V√©rification de la configuration Vercel..."

# V√©rifier la structure vercel.json
if [ -f "vercel.json" ]; then
    if grep -q '"version"' vercel.json && grep -q '"buildCommand"' vercel.json; then
        echo -e "${GREEN}‚úì${NC} Configuration Vercel basique pr√©sente"
    else
        echo -e "${YELLOW}‚ö†${NC} Configuration Vercel incompl√®te"
    fi
fi

echo -e "\nüêç V√©rification de la configuration Render..."

# V√©rifier la structure render.yaml
if [ -f "apps/backend/render.yaml" ]; then
    if grep -q 'type: web' apps/backend/render.yaml && grep -q 'name: lavidaluca-backend' apps/backend/render.yaml; then
        echo -e "${GREEN}‚úì${NC} Configuration Render basique pr√©sente"
    else
        echo -e "${YELLOW}‚ö†${NC} Configuration Render incompl√®te"
    fi
fi

echo -e "\nüìù R√©sum√© de la validation"
echo "========================="

if [ $errors -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Toutes les v√©rifications sont pass√©es !${NC}"
    echo -e "La configuration de d√©ploiement est pr√™te."
    echo ""
    echo "Prochaines √©tapes :"
    echo "1. Vercel : Connecter le repo et d√©ployer"
    echo "2. Render : Connecter le repo et configurer les variables d'env"
    echo "3. Tester le d√©ploiement avec 'npm run deploy:check'"
    exit 0
else
    echo -e "${RED}‚ùå $errors erreur(s) d√©tect√©e(s)${NC}"
    echo -e "Veuillez corriger les probl√®mes avant de d√©ployer."
    exit 1
fi