"""
Main FastAPI application for La Vida Luca.
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from contextlib import asynccontextmanager
import logging

from .config import settings
from .database import database
from .routes import auth, users, activities, contacts, suggestions
from .middleware import setup_middleware
from .exceptions import setup_exception_handlers


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager."""
    logger.info("Starting La Vida Luca API...")
    
    # Connect to database
    await database.connect()
    logger.info("Database connected")
    
    yield
    
    # Cleanup
    await database.disconnect()
    logger.info("Database disconnected")
    logger.info("La Vida Luca API shutdown")


def create_app() -> FastAPI:
    """Create and configure the FastAPI application."""
    
    app = FastAPI(
        title="La Vida Luca API",
        description="""
        ## üå± API pour la plateforme collaborative La Vida Luca

        La Vida Luca est une plateforme d√©di√©e √† la formation des jeunes en MFR (Maisons Familiales Rurales) 
        et au d√©veloppement d'une agriculture vivante et respectueuse.

        ### Fonctionnalit√©s principales

        * **üîê Authentification** - Gestion des utilisateurs avec JWT
        * **üéØ Activit√©s** - Catalogue de 30+ activit√©s p√©dagogiques
        * **ü§ñ Suggestions IA** - Recommandations personnalis√©es bas√©es sur les profils
        * **üìß Contact** - Gestion des demandes de contact et d'inscription
        * **üë• Utilisateurs** - Profils et pr√©f√©rences des participants

        ### Architecture technique

        * **Backend**: FastAPI + Python 3.11+
        * **Base de donn√©es**: PostgreSQL avec SQLAlchemy (async)
        * **Authentification**: JWT (JSON Web Tokens)
        * **IA**: OpenAI GPT pour les suggestions personnalis√©es
        * **Monitoring**: Sentry pour le tracking d'erreurs

        ### S√©curit√©

        * Authentification par tokens JWT
        * Hashage s√©curis√© des mots de passe (bcrypt)
        * Validation des donn√©es avec Pydantic
        * Protection CORS configur√©e
        * Rate limiting sur les endpoints sensibles

        ### Utilisation

        1. **Inscription/Connexion** via `/api/v1/auth/`
        2. **Exploration du catalogue** via `/api/v1/activities/`
        3. **Suggestions personnalis√©es** via `/api/v1/suggestions/`
        4. **Contact** via `/api/v1/contacts/`

        Pour plus d'informations, consultez notre [documentation compl√®te](https://github.com/vidaluca77-cloud/LaVidaLuca-App).
        """,
        version="1.0.0",
        lifespan=lifespan,
        docs_url="/docs" if settings.ENVIRONMENT != "production" else None,
        redoc_url="/redoc" if settings.ENVIRONMENT != "production" else None,
        
        # OpenAPI configuration
        openapi_tags=[
            {
                "name": "authentication",
                "description": "üîê Gestion de l'authentification et des sessions utilisateur",
            },
            {
                "name": "users",
                "description": "üë• Gestion des profils utilisateurs et pr√©f√©rences",
            },
            {
                "name": "activities",
                "description": "üéØ Catalogue d'activit√©s p√©dagogiques et agricoles",
            },
            {
                "name": "suggestions",
                "description": "ü§ñ Recommandations personnalis√©es par IA",
            },
            {
                "name": "contacts",
                "description": "üìß Gestion des demandes de contact et d'inscription",
            },
        ],
        
        # Contact information
        contact={
            "name": "√âquipe La Vida Luca",
            "email": "vidaluca77@gmail.com",
            "url": "https://github.com/vidaluca77-cloud/LaVidaLuca-App",
        },
        
        # License information
        license_info={
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT",
        },
        
        # Terms of service
        terms_of_service="https://github.com/vidaluca77-cloud/LaVidaLuca-App/blob/main/LICENSE",
        
        # Servers information for different environments
        servers=[
            {
                "url": "http://localhost:8000",
                "description": "Serveur de d√©veloppement local"
            },
            {
                "url": "https://lavidaluca-api.render.com",
                "description": "Serveur de production"
            }
        ]
    )
    
    # Setup middleware
    setup_middleware(app)
    
    # Setup exception handlers
    setup_exception_handlers(app)
    
    # Include routes
    app.include_router(auth.router, prefix="/api/v1/auth", tags=["authentication"])
    app.include_router(users.router, prefix="/api/v1/users", tags=["users"])
    app.include_router(activities.router, prefix="/api/v1/activities", tags=["activities"])
    app.include_router(contacts.router, prefix="/api/v1/contacts", tags=["contacts"])
    app.include_router(suggestions.router, prefix="/api/v1/suggestions", tags=["suggestions"])
    
    @app.get("/")
    async def root():
        """Root endpoint."""
        return {
            "message": "Welcome to La Vida Luca API",
            "version": "1.0.0",
            "docs": "/docs",
            "status": "healthy"
        }
    
    @app.get("/health")
    async def health_check():
        """Health check endpoint."""
        try:
            # Test database connection
            await database.execute("SELECT 1")
            db_status = "healthy"
        except Exception as e:
            logger.error(f"Database health check failed: {e}")
            db_status = "unhealthy"
        
        return {
            "status": "healthy",
            "database": db_status,
            "environment": settings.ENVIRONMENT
        }
    
    return app


# Create app instance
app = create_app()