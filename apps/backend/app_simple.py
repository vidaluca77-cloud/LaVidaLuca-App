"""
Simple working FastAPI app for La Vida Luca.
This version bypasses the complex import structure for now.
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
import logging
import os

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="La Vida Luca API",
    description="API pour la plateforme collaborative La Vida Luca",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, replace with specific origins
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


class GuideRequest(BaseModel):
    """Request model for guide endpoint."""
    question: str
    context: Optional[str] = None


class GuideResponse(BaseModel):
    """Response model for guide endpoint."""
    answer: str
    confidence: Optional[float] = None
    sources: Optional[list[str]] = None


class AgricultureRequest(BaseModel):
    """Request model for agricultural assistant."""
    question: str
    context: Optional[str] = None
    location: Optional[str] = None
    crop_type: Optional[str] = None


class AgricultureResponse(BaseModel):
    """Response model for agricultural assistant."""
    answer: str
    category: Optional[str] = None
    tags: list[str] = []
    response_time: str
    confidence: Optional[float] = None


@app.get("/")
async def root():
    """Root endpoint."""
    return {
        "message": "Welcome to La Vida Luca API",
        "version": "1.0.0",
        "docs": "/docs",
        "status": "healthy"
    }


@app.get("/health")
async def health_check():
    """Health check endpoint."""
    return {
        "status": "healthy",
        "database": "not_connected",  # Simplified for now
        "environment": os.getenv("ENVIRONMENT", "development")
    }


@app.post("/api/v1/guide", response_model=GuideResponse)
async def get_guide(request: GuideRequest):
    """
    Get AI-powered guidance for questions about sustainable living and gardening.
    """
    try:
        # Generate response based on question content
        if "sol" in request.question.lower() or "terre" in request.question.lower():
            answer = """Pour am√©liorer un sol argileux compact, voici quelques conseils :

1. **Ajouter de la mati√®re organique** : Incorporez du compost, du fumier bien d√©compos√© ou des feuilles mortes pour am√©liorer la structure du sol.

2. **√âviter le travail du sol humide** : Ne jamais travailler un sol argileux quand il est d√©tremp√©, cela cr√©erait des mottes tr√®s dures.

3. **Cr√©er des buttes de culture** : Sur√©levez vos zones de plantation pour am√©liorer le drainage.

4. **Planter des couvre-sols** : Utilisez des plantes comme la luzerne ou le tr√®fle pour structurer naturellement le sol.

5. **Paillis permanent** : Gardez le sol couvert pour prot√©ger sa structure et nourrir la vie microbienne.

Ces m√©thodes am√©liorent progressivement la texture et la fertilit√© de votre sol argileux."""
            
        elif "jardinage" in request.question.lower() or "plante" in request.question.lower():
            answer = """Pour r√©ussir votre jardinage, voici des conseils de base :

1. **Conna√Ætre son sol** : Testez le pH et la composition de votre terre
2. **Choisir les bonnes plantes** : Adapt√©es √† votre climat et exposition
3. **Planifier les rotations** : Alternez les familles de l√©gumes
4. **Arroser intelligemment** : Le matin de pr√©f√©rence, au pied des plantes
5. **Composter** : Recyclez vos d√©chets verts pour nourrir le sol

Besoin de conseils plus sp√©cifiques ? N'h√©sitez pas √† pr√©ciser votre question !"""
        
        elif "compost" in request.question.lower():
            answer = """Voici comment faire un compost efficace :

1. **√âquilibrer vert et brun** : 1/3 de mati√®res azot√©es (√©pluchures, tontes) pour 2/3 de mati√®res carbon√©es (feuilles s√®ches, carton)

2. **Surveiller l'humidit√©** : Le compost doit √™tre humide comme une √©ponge essor√©e

3. **A√©rer r√©guli√®rement** : Retournez le tas toutes les 2-3 semaines

4. **Temp√©rature id√©ale** : 50-60¬∞C au centre indique une bonne d√©composition

5. **Patience** : Comptez 6-12 mois selon les conditions

Un bon compost sent la terre de for√™t, pas l'ammoniaque !"""
        
        else:
            answer = f"""Merci pour votre question : "{request.question}"

Je suis l√† pour vous aider avec des conseils sur :
- Le jardinage et la permaculture
- La vie durable et √©cologique  
- Les initiatives communautaires locales
- La pr√©servation de l'environnement

Pouvez-vous pr√©ciser votre domaine d'int√©r√™t pour que je puisse vous donner des conseils plus adapt√©s ?"""

        return GuideResponse(
            answer=answer,
            confidence=0.8,
            sources=["La Vida Luca Knowledge Base", "Sustainable Living Practices"]
        )
        
    except Exception as e:
        logger.error(f"Error in guide endpoint: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail="Une erreur est survenue lors du traitement de votre question"
        )


@app.get("/api/v1/guide/health")
async def guide_health():
    """Health check for guide service."""
    return {
        "status": "healthy",
        "service": "guide",
        "ai_enabled": os.getenv("OPENAI_API_KEY") is not None
    }


@app.post("/api/v1/consultations/ask", response_model=AgricultureResponse)
async def agricultural_assistant(request: AgricultureRequest):
    """
    Agricultural AI assistant for answering farming questions.
    """
    import time
    start_time = time.time()
    
    try:
        # Analyze the question to determine category and generate appropriate response
        question_lower = request.question.lower()
        
        # Determine category based on keywords
        if any(word in question_lower for word in ['permaculture', 'biologique', 'durable', '√©cologique']):
            category = 'permaculture'
        elif any(word in question_lower for word in ['culture', 'plante', 'semis', 'r√©colte', 'rotation']):
            category = 'crop_management'
        elif any(word in question_lower for word in ['animal', '√©levage', 'b√©tail', 'volaille']):
            category = 'animal_health'
        elif any(word in question_lower for word in ['sol', 'compost', 'fertilisant', 'terre']):
            category = 'soil_management'
        elif any(word in question_lower for word in ['parasite', 'maladie', 'insecte', 'traitement']):
            category = 'pest_control'
        elif any(word in question_lower for word in ['eau', 'irrigation', 'arrosage']):
            category = 'irrigation'
        else:
            category = 'general'
        
        # Generate response based on category and keywords
        if category == 'soil_management' or 'sol' in question_lower:
            answer = """üå± **Am√©lioration des sols agricoles**

Pour optimiser la qualit√© de votre sol :

**1. Analyse du sol**
- Testez le pH (id√©al : 6,0-7,0 pour la plupart des cultures)
- V√©rifiez la teneur en mati√®re organique (objectif : 3-5%)
- √âvaluez la structure et le drainage

**2. Enrichissement naturel**
- Compost m√ªr : 20-30 tonnes/hectare/an
- Fumier bien d√©compos√© : am√©liore la structure
- Couverture v√©g√©tale permanente : prot√®ge et nourrit

**3. Techniques biologiques**
- Rotation des cultures : √©vite l'√©puisement
- Cultures d'engrais verts : luzerne, tr√®fle, moutarde
- R√©duction du travail du sol : pr√©serve la vie microbienne

**4. Gestion de l'eau**
- Drainage adapt√© selon le type de sol
- Irrigation raisonn√©e pour √©viter le lessivage
- Paillage pour retenir l'humidit√©

Un sol vivant et fertile est la base d'une agriculture durable !"""
            tags = ['sol', 'fertilit√©', 'compost', 'analyse']
            
        elif category == 'crop_management' or any(word in question_lower for word in ['tomate', 'l√©gume', 'culture']):
            answer = """üçÖ **Gestion des cultures**

Conseils pour une production optimale :

**1. Planification**
- Rotation 4 ans minimum : l√©gumes-feuilles ‚Üí l√©gumineuses ‚Üí l√©gumes-racines ‚Üí c√©r√©ales
- Associations b√©n√©fiques : tomates + basilic, courges + haricots + ma√Øs
- Calendrier de semis adapt√© √† votre r√©gion

**2. Techniques culturales**
- Semis en p√©pini√®re pour les plants exigeants
- Transplantation quand les risques de gel sont √©cart√©s
- Espacement respect√© pour √©viter la concurrence

**3. Suivi sanitaire**
- Observation quotidienne des cultures
- Traitement pr√©ventif naturel (purins d'ortie, pr√™le)
- √âlimination rapide des plants malades

**4. R√©colte optimis√©e**
- R√©colte au bon stade de maturit√©
- Horaires frais (matin/soir) pour pr√©server la qualit√©
- Conservation adapt√©e selon le l√©gume

Une approche pr√©ventive vaut mieux qu'un traitement curatif !"""
            tags = ['cultures', 'rotation', 'association', 'r√©colte']
            
        elif category == 'pest_control' or any(word in question_lower for word in ['parasite', 'maladie', 'puceron']):
            answer = """üêõ **Lutte biologique contre les ravageurs**

Solutions naturelles et durables :

**1. Pr√©vention**
- Biodiversit√© : haies, fleurs mellif√®res, nichoirs
- Plantes r√©pulsives : tanaisie, lavande, ≈ìillets d'Inde
- Hygi√®ne culturale : √©limination des d√©chets infect√©s

**2. Auxiliaires naturels**
- Coccinelles contre les pucerons
- Chrysopes contre les thrips
- Oiseaux insectivores : m√©sanges, rouge-gorge

**3. Traitements biologiques**
- Purin d'ortie : r√©pulsif et fertilisant (dilution 10%)
- D√©coction de pr√™le : fongicide naturel
- Savon noir : contre pucerons et acariens

**4. Barri√®res physiques**
- Voiles anti-insectes pour protections directes
- Pi√®ges chromatiques : jaunes pour pucerons, bleus pour thrips
- Mulch r√©pulsif : copeaux de c√®dre

L'√©quilibre naturel est votre meilleur alli√© !"""
            tags = ['biocontr√¥le', 'auxiliaires', 'pr√©vention', 'purin']
            
        elif category == 'permaculture':
            answer = """üåø **Principes de permaculture**

Cr√©er un syst√®me agricole durable :

**1. Observation et design**
- Analysez votre terrain : exposition, d√©nivel√©, microclimat
- Zonage : zones intensives pr√®s de la maison, extensives en p√©riph√©rie
- Flux d'√©nergie et circuits courts

**2. Diversit√© et r√©silience**
- Polyculture vs monoculture
- √âtagement vertical : arbres, arbustes, herbac√©es, couvre-sol
- √âcosyst√®mes autonomes et auto-r√©gul√©s

**3. Gestion de l'eau**
- R√©cup√©ration d'eau de pluie
- Swales et bassins de r√©tention
- Irrigation gravitaire

**4. Cycles ferm√©s**
- Compostage de tous les d√©chets organiques
- Int√©gration animaux-v√©g√©taux
- Valorisation √©nerg√©tique (biogaz, solaire)

**5. Sols vivants**
- Jamais de sol nu
- Apports organiques permanents
- Minimal intervention

La permaculture imite les √©cosyst√®mes naturels pour une productivit√© durable !"""
            tags = ['permaculture', 'design', 'durabilit√©', '√©cosyst√®me']
            
        elif category == 'animal_health':
            answer = """üêÑ **Sant√© animale en √©levage durable**

Approche pr√©ventive et naturelle :

**1. Bien-√™tre animal**
- Espace suffisant : 2-3x les normes conventionnelles
- Acc√®s au plein air et √† l'ombre
- Enrichissement du milieu de vie

**2. Alimentation naturelle**
- P√¢turages diversifi√©s : gramin√©es + l√©gumineuses
- Foin de qualit√© en compl√©ment
- Eau propre et accessible en permanence

**3. Pr√©vention sanitaire**
- Quarantaine pour nouveaux animaux
- Observation quotidienne du comportement
- Rotation des p√¢tures contre le parasitisme

**4. M√©decines alternatives**
- Phytoth√©rapie : √©chinac√©e, ail, thym
- Aromath√©rapie pour stress et infections
- Hom√©opathie en compl√©ment

**5. Gestion du troupeau**
- S√©lection d'races rustiques adapt√©es
- Reproduction naturelle privil√©gi√©e
- Abattage stress-free

Un animal en bonne sant√© dans un environnement adapt√© produit mieux !"""
            tags = ['bien-√™tre', 'pr√©vention', 'phytoth√©rapie', 'p√¢turage']
            
        else:
            answer = f"""üåæ **Assistant Agricole La Vida Luca**

Merci pour votre question : "{request.question}"

Je suis sp√©cialis√© dans l'accompagnement agricole durable. Mes domaines d'expertise :

üå± **Gestion des sols** : fertilit√©, compostage, analyses
üçÖ **Cultures** : rotation, associations, calendrier cultural
üêõ **Biocontr√¥le** : lutte naturelle contre ravageurs et maladies
üåø **Permaculture** : design √©cologique, autonomie alimentaire
üêÑ **√âlevage durable** : bien-√™tre animal, m√©decines naturelles
üíß **Irrigation** : √©conomie d'eau, techniques adapt√©es
üå°Ô∏è **Adaptation climatique** : vari√©t√©s r√©sistantes, microclimats

**Posez-moi une question plus sp√©cifique** pour obtenir des conseils pratiques adapt√©s √† votre situation !

Exemples :
- "Comment am√©liorer un sol argileux ?"
- "Quelles associations de l√©gumes dans mon potager ?"
- "Comment lutter contre les pucerons naturellement ?"
- "Quelle rotation pour mes parcelles c√©r√©ali√®res ?"
"""
            tags = ['conseil', 'agriculture', 'durable']
        
        response_time = f"{(time.time() - start_time):.2f}s"
        
        return AgricultureResponse(
            answer=answer,
            category=category,
            tags=tags,
            response_time=response_time,
            confidence=0.85
        )
        
    except Exception as e:
        logger.error(f"Error in agricultural assistant: {str(e)}")
        response_time = f"{(time.time() - start_time):.2f}s"
        raise HTTPException(
            status_code=500,
            detail="Une erreur est survenue lors du traitement de votre question agricole"
        )


@app.get("/api/v1/consultations/categories")
async def get_agriculture_categories():
    """Get available agricultural consultation categories."""
    return {
        "categories": [
            {
                "id": "soil_management",
                "name": "Gestion des sols",
                "description": "Fertilit√©, compostage, analyses de sol",
                "icon": "üå±"
            },
            {
                "id": "crop_management", 
                "name": "Gestion des cultures",
                "description": "Rotation, associations, calendrier cultural",
                "icon": "üçÖ"
            },
            {
                "id": "pest_control",
                "name": "Biocontr√¥le",
                "description": "Lutte naturelle contre ravageurs et maladies",
                "icon": "üêõ"
            },
            {
                "id": "permaculture",
                "name": "Permaculture",
                "description": "Design √©cologique, autonomie alimentaire",
                "icon": "üåø"
            },
            {
                "id": "animal_health",
                "name": "√âlevage durable",
                "description": "Bien-√™tre animal, m√©decines naturelles",
                "icon": "üêÑ"
            },
            {
                "id": "irrigation",
                "name": "Irrigation",
                "description": "√âconomie d'eau, techniques adapt√©es",
                "icon": "üíß"
            },
            {
                "id": "climate_adaptation",
                "name": "Adaptation climatique",
                "description": "Vari√©t√©s r√©sistantes, microclimats",
                "icon": "üå°Ô∏è"
            }
        ]
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)