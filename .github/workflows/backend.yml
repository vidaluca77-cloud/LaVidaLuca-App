name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/backend/**'
  pull_request:
    branches: [main]
    paths:
      - 'apps/backend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        test-type: ['unit', 'integration', 'security']
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_lavidaluca
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: apps/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up environment variables
      working-directory: apps/backend
      run: |
        echo "ENVIRONMENT=testing" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_lavidaluca" >> .env
        echo "JWT_SECRET_KEY=test-secret-key-for-ci" >> .env
        echo "OPENAI_API_KEY=test-key" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
    
    - name: Run database migrations
      working-directory: apps/backend
      run: |
        alembic upgrade head
    
    - name: Lint with flake8
      working-directory: apps/backend
      run: |
        flake8 app/ --max-line-length=120 --exclude=app/tests/,alembic/,migrations/ --extend-ignore=E203,W503
      continue-on-error: true
    
    - name: Format check with black
      working-directory: apps/backend
      run: |
        black --check app/ --line-length=120
      continue-on-error: true
    
    - name: Import sorting check with isort
      working-directory: apps/backend
      run: |
        isort --check-only app/
      continue-on-error: true
    
    - name: Type checking with mypy
      working-directory: apps/backend
      run: |
        mypy app/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Run unit tests
      if: matrix.test-type == 'unit'
      working-directory: apps/backend
      run: |
        pytest app/tests/ -v --tb=short -m "not integration and not security and not performance" \
               --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      if: matrix.test-type == 'integration'
      working-directory: apps/backend
      run: |
        pytest app/tests/test_database_integration.py app/tests/test_auth_comprehensive.py app/tests/test_api_endpoints.py \
               -v --tb=short --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Run security tests
      if: matrix.test-type == 'security'
      working-directory: apps/backend
      run: |
        pytest app/tests/test_security.py -v --tb=short
    
    - name: Security scan with bandit
      if: matrix.test-type == 'security' && matrix.python-version == '3.11'
      working-directory: apps/backend
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ || true
      continue-on-error: true
    
    - name: Vulnerability check with safety
      if: matrix.test-type == 'security' && matrix.python-version == '3.11'
      working-directory: apps/backend
      run: |
        safety check --json --output safety-report.json || true
        safety check || true
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        files: ./apps/backend/coverage.xml
        directory: ./apps/backend/
        fail_ci_if_error: false
        verbose: true
    
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-${{ matrix.python-version }}-${{ matrix.test-type }}
        path: |
          apps/backend/htmlcov/
          apps/backend/bandit-report.json
          apps/backend/safety-report.json
          apps/backend/pytest-report.xml
        retention-days: 30

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_lavidaluca
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: apps/backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Set up environment
      working-directory: apps/backend
      run: |
        echo "ENVIRONMENT=testing" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_lavidaluca" >> .env
        echo "JWT_SECRET_KEY=test-secret-key-for-ci" >> .env
    
    - name: Run database migrations
      working-directory: apps/backend
      run: |
        alembic upgrade head
    
    - name: Start application
      working-directory: apps/backend
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10  # Wait for app to start
    
    - name: Run performance tests
      working-directory: apps/backend
      run: |
        locust -f app/tests/test_performance.py --host=http://localhost:8000 \
               --users 10 --spawn-rate 2 --run-time 60s --headless \
               --html performance-report.html --csv performance-results
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          apps/backend/performance-report.html
          apps/backend/performance-results_*.csv
        retention-days: 30

  deploy:
    needs: [test, performance-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment steps here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test steps here
    
    - name: Deploy to production
      if: success()
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}

  notify:
    runs-on: ubuntu-latest
    needs: [test, performance-test, deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.performance-test.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        # Add notification logic (Slack, email, etc.)
    
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.performance-test.result == 'failure' }}
      run: |
        echo "❌ Tests failed!"
        # Add failure notification logic