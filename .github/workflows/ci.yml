name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        npm install
        cd apps/web && npm ci
        cd ../backend && pip install -r requirements.txt

    - name: Run ESLint (Frontend)
      run: |
        cd apps/web
        npm run lint

    - name: Run Python Linting (Backend)
      run: |
        cd apps/backend
        pip install flake8 black isort mypy
        black --check .
        isort --check-only .
        flake8 . --max-line-length=88 --extend-ignore=E203,W503
        mypy . --ignore-missing-imports
      continue-on-error: true

    - name: TypeScript Type Check
      run: |
        npm run type-check

    - name: Security Audit (npm)
      run: |
        cd apps/web
        npm audit --audit-level=high
      continue-on-error: true

    - name: Security Audit (Python)
      run: |
        cd apps/backend
        pip install safety
        safety check
      continue-on-error: true

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: lavidaluca_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('apps/backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install backend dependencies
      run: |
        cd apps/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio
        
    - name: Set up environment variables
      run: |
        cd apps/backend
        cp .env.example .env
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/lavidaluca_test" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "ENVIRONMENT=testing" >> .env
        echo "JWT_SECRET_KEY=test-secret-key" >> .env
        
    - name: Run database migrations
      run: |
        cd apps/backend
        alembic upgrade head
        
    - name: Run backend tests
      run: |
        cd apps/backend
        python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: apps/backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-test:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'apps/web/package-lock.json'
        
    - name: Install frontend dependencies
      run: |
        cd apps/web
        npm ci
        
    - name: Set up environment variables
      run: |
        cd apps/web
        echo "NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1" > .env.local
        echo "NEXT_PUBLIC_IA_API_URL=http://localhost:8001" >> .env.local
        echo "SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING=1" >> .env.local
        
    - name: Run frontend tests
      run: |
        cd apps/web
        npm test -- --coverage --watchAll=false
        
    - name: Build frontend
      run: |
        cd apps/web
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: apps/web/.next

  ia-service-test:
    name: IA Service Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install IA service dependencies
      run: |
        cd apps/ia
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
        
    - name: Test IA service
      run: |
        cd apps/ia
        python -c "import uvicorn, main; print('IA service imports successfully')"
        # Add actual tests when available
        python -m pytest tests/ -v || echo "No tests found, skipping"

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, ia-service-test]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: lavidaluca_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'apps/web/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd apps/backend && pip install -r requirements.txt
        cd ../ia && pip install -r requirements.txt
        cd ../web && npm ci
        
    - name: Start services
      run: |
        # Start backend
        cd apps/backend
        cp .env.example .env
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/lavidaluca_test" >> .env
        echo "ENVIRONMENT=testing" >> .env
        alembic upgrade head
        python main.py &
        
        # Start IA service
        cd ../ia
        echo "ENVIRONMENT=testing" > .env
        python main.py &
        
        # Wait for services to start
        sleep 15
        
    - name: Test API endpoints
      run: |
        # Test backend health
        curl -f http://localhost:8000/health || exit 1
        
        # Test IA service health
        curl -f http://localhost:8001/health || exit 1
        
        # Test guide endpoint
        curl -f -X POST http://localhost:8001/guide \
          -H "Content-Type: application/json" \
          -d '{"question":"Test question"}' || exit 1

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: apps/backend
        push: false
        tags: lavidaluca-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: apps/web
        file: apps/web/Dockerfile
        push: false
        tags: lavidaluca-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build IA service image
      uses: docker/build-push-action@v5
      with:
        context: apps/ia
        push: false
        tags: lavidaluca-ia:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-test]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Run Lighthouse CI
      run: |
        cd apps/web
        npm install -g @lhci/cli@0.12.x
        # Add Lighthouse CI configuration when needed
        echo "Lighthouse CI would run here"