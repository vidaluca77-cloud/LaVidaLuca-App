name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: lavidaluca_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('apps/backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install backend dependencies
      run: |
        cd apps/backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up environment variables
      run: |
        cd apps/backend
        cp .env.example .env
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/lavidaluca_test" >> .env
        echo "ENVIRONMENT=testing" >> .env
        
    - name: Run backend tests
      run: |
        cd apps/backend
        python -m pytest test_simple.py -v --tb=short
        
    - name: Generate test coverage
      run: |
        cd apps/backend
        python -m pytest test_simple.py --cov=app_simple --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: apps/backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'apps/web/package-lock.json'
        
    - name: Install frontend dependencies
      run: |
        cd apps/web
        npm ci
        
    - name: Set up environment variables
      run: |
        cd apps/web
        cp .env.local.example .env.local
        echo "NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1" >> .env.local
        echo "SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING=1" >> .env.local
        
    - name: Lint frontend code
      run: |
        cd apps/web
        npm run lint
      continue-on-error: true
        
    - name: Build frontend
      run: |
        cd apps/web
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: apps/web/.next

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: lavidaluca_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'apps/web/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd apps/backend && pip install -r requirements.txt
        cd ../web && npm ci
        
    - name: Start backend server
      run: |
        cd apps/backend
        cp .env.example .env
        echo "DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/lavidaluca_test" >> .env
        python app_simple.py &
        sleep 10
        
    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        # Test guide endpoint
        curl -f -X POST http://localhost:8000/api/v1/guide \
          -H "Content-Type: application/json" \
          -d '{"question":"Test question"}' || exit 1