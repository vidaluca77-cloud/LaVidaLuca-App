name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript check
      run: npm run type-check
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test -- --passWithNoTests --coverage
      env:
        NODE_ENV: test
        ENVIRONMENT: testing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: lavidaluca_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install backend dependencies
      run: |
        cd apps/backend
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        cd apps/backend
        python -m pytest test_simple.py -v --cov=app_simple --cov-report=xml
      env:
        ENVIRONMENT: testing
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/lavidaluca_test

  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Render
      run: |
        curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_IA }}" \
          -H "Content-Type: application/json" \
          -d '{
            "clearCache": false,
            "commitId": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}"
          }'
      
    - name: Verify deployment
      run: |
        echo "Backend deployment triggered successfully"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        
    - name: Wait for deployment
      run: sleep 30
      
    - name: Health check
      run: |
        # Add health check URL when available
        echo "Health check would run here with backend URL"

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Deploy to Vercel
      run: |
        vercel --token ${{ secrets.VERCEL_TOKEN }} \
          --scope ${{ secrets.VERCEL_ORG_ID }} \
          --prod \
          --yes \
          --confirm
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        
    - name: Verify deployment
      run: |
        echo "Frontend deployment completed successfully"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"

  post-deploy-checks:
    name: Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment status check
      run: |
        if [[ "${{ needs.deploy-backend.result }}" == "success" && "${{ needs.deploy-frontend.result }}" == "success" ]]; then
          echo "✅ Deployment successful"
          echo "Backend: Deployed to Render"
          echo "Frontend: Deployed to Vercel"
        else
          echo "❌ Deployment failed"
          echo "Backend status: ${{ needs.deploy-backend.result }}"
          echo "Frontend status: ${{ needs.deploy-frontend.result }}"
          exit 1
        fi
        
    - name: Notify deployment status
      if: always()
      run: |
        # Here you could add notifications to Slack, Discord, etc.
        echo "Deployment notification sent"
        
    - name: Update Sentry release
      if: success()
      run: |
        # Create Sentry release for tracking
        echo "Would create Sentry release: ${{ github.sha }}"