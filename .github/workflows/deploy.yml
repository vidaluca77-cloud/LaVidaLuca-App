name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.changes.outputs.backend }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      ia_changed: ${{ steps.changes.outputs.ia }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'apps/backend/**'
          frontend:
            - 'apps/web/**'
            - 'src/**'
            - 'public/**'
          ia:
            - 'apps/ia/**'

    - name: Check deployment readiness
      run: |
        echo "Backend changed: ${{ steps.changes.outputs.backend }}"
        echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
        echo "IA service changed: ${{ steps.changes.outputs.ia }}"

  deploy-backend:
    name: Deploy Backend to Render
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.backend_changed == 'true' || github.event.inputs.force_deploy == 'true'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies and run quick tests
      run: |
        cd apps/backend
        pip install -r requirements.txt
        python -c "import main; print('Backend imports successfully')"

    - name: Deploy to Render
      run: |
        echo "Deploying backend to Render..."
        if [ -n "${{ secrets.RENDER_DEPLOY_HOOK_IA }}" ]; then
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_IA }}" \
            -H "Content-Type: application/json" \
            -d '{
              "clearCache": false,
              "commitId": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}"
            }'
          echo "✅ Backend deployment triggered"
        else
          echo "⚠️ RENDER_DEPLOY_HOOK_IA secret not configured"
        fi
      
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60  # Wait for deployment
        
    - name: Verify deployment
      run: |
        echo "Verifying backend deployment..."
        # Add health check when backend URL is available
        echo "Backend deployment completed"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.frontend_changed == 'true' || github.event.inputs.force_deploy == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'apps/web/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd apps/web
        npm ci
        
    - name: Build application
      run: |
        cd apps/web
        npm run build
        
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Deploy to Vercel
      run: |
        cd apps/web
        if [ -n "${{ secrets.VERCEL_TOKEN }}" ]; then
          vercel --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --prod \
            --yes \
            --confirm
          echo "✅ Frontend deployed to Vercel"
        else
          echo "⚠️ Vercel secrets not configured, skipping deployment"
        fi
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        
    - name: Verify deployment
      run: |
        echo "Frontend deployment completed successfully"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"

  deploy-ia-service:
    name: Deploy IA Service
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.ia_changed == 'true' || github.event.inputs.force_deploy == 'true'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies and test
      run: |
        cd apps/ia
        pip install -r requirements.txt
        python -c "import main; print('IA service imports successfully')"

    - name: Deploy IA Service
      run: |
        echo "IA service deployment would be triggered here"
        echo "Configure IA_DEPLOY_HOOK secret for automatic deployment"
        # Add actual deployment when service is configured

  smoke-tests:
    name: Post-deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-ia-service]
    if: always() && (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success' || needs.deploy-ia-service.result == 'success')
    
    steps:
    - name: Test deployed services
      run: |
        echo "Running smoke tests..."
        
        # Test production URLs when available
        # curl -f https://your-backend-url.render.com/health || echo "Backend health check failed"
        # curl -f https://your-frontend-url.vercel.app || echo "Frontend check failed"
        
        echo "Smoke tests completed"

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-ia-service, smoke-tests]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Calculate deployment status
      id: status
      run: |
        backend_status="${{ needs.deploy-backend.result }}"
        frontend_status="${{ needs.deploy-frontend.result }}"
        ia_status="${{ needs.deploy-ia-service.result }}"
        smoke_status="${{ needs.smoke-tests.result }}"
        
        # Count successful deployments
        success_count=0
        total_count=0
        
        if [ "$backend_status" != "skipped" ]; then
          total_count=$((total_count + 1))
          [ "$backend_status" = "success" ] && success_count=$((success_count + 1))
        fi
        
        if [ "$frontend_status" != "skipped" ]; then
          total_count=$((total_count + 1))
          [ "$frontend_status" = "success" ] && success_count=$((success_count + 1))
        fi
        
        if [ "$ia_status" != "skipped" ]; then
          total_count=$((total_count + 1))
          [ "$ia_status" = "success" ] && success_count=$((success_count + 1))
        fi
        
        echo "success_count=$success_count" >> $GITHUB_OUTPUT
        echo "total_count=$total_count" >> $GITHUB_OUTPUT
        
        if [ $success_count -eq $total_count ] && [ $total_count -gt 0 ]; then
          echo "overall_status=success" >> $GITHUB_OUTPUT
        else
          echo "overall_status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Deployment notification
      run: |
        echo "=== La Vida Luca Deployment Report ==="
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Triggered by: ${{ github.actor }}"
        echo ""
        
        if [ "${{ steps.status.outputs.overall_status }}" = "success" ]; then
          echo "✅ Deployment successful (${{ steps.status.outputs.success_count }}/${{ steps.status.outputs.total_count }} services)"
        else
          echo "❌ Deployment issues detected"
        fi
        
        echo ""
        echo "Service Status:"
        echo "- Backend: ${{ needs.deploy-backend.result }}"
        echo "- Frontend: ${{ needs.deploy-frontend.result }}"
        echo "- IA Service: ${{ needs.deploy-ia-service.result }}"
        echo "- Smoke Tests: ${{ needs.smoke-tests.result }}"
        
        if [ "${{ steps.status.outputs.overall_status }}" != "success" ]; then
          exit 1
        fi