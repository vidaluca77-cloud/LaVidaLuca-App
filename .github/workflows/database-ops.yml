name: Database Operations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      operation:
        description: 'Database operation'
        required: true
        default: 'migrate'
        type: choice
        options:
          - migrate
          - seed
          - backup
          - restore
  push:
    branches: [ main, develop ]
    paths:
      - 'infra/supabase/**'

jobs:
  migrate:
    name: Database Migration
    runs-on: ubuntu-latest
    if: github.event.inputs.operation == 'migrate' || contains(github.event.head_commit.modified, 'infra/supabase/')
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Run migrations
        run: |
          supabase db push --db-url ${{ secrets.SUPABASE_DB_URL }}
        working-directory: ./infra/supabase

      - name: Verify migration
        run: |
          supabase db diff --db-url ${{ secrets.SUPABASE_DB_URL }}
        working-directory: ./infra/supabase

  seed:
    name: Database Seeding
    runs-on: ubuntu-latest
    if: github.event.inputs.operation == 'seed'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Run seed data
        run: |
          supabase db reset --db-url ${{ secrets.SUPABASE_DB_URL }}
        working-directory: ./infra/supabase

  backup:
    name: Database Backup
    runs-on: ubuntu-latest
    if: github.event.inputs.operation == 'backup'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create backup
        run: |
          pg_dump ${{ secrets.SUPABASE_DB_URL }} > backup-$(date +%Y%m%d-%H%M%S).sql
          
      - name: Upload backup to S3
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Upload to S3
        run: |
          aws s3 cp backup-*.sql s3://la-vida-luca-backups/database/

  restore:
    name: Database Restore
    runs-on: ubuntu-latest
    if: github.event.inputs.operation == 'restore'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Download latest backup
        run: |
          aws s3 cp s3://la-vida-luca-backups/database/ . --recursive --exclude "*" --include "backup-*.sql"
          LATEST_BACKUP=$(ls -t backup-*.sql | head -n1)
          echo "BACKUP_FILE=$LATEST_BACKUP" >> $GITHUB_ENV

      - name: Restore database
        run: |
          psql ${{ secrets.SUPABASE_DB_URL }} < ${{ env.BACKUP_FILE }}

  health-check:
    name: Database Health Check
    runs-on: ubuntu-latest
    needs: [migrate]
    if: always()
    steps:
      - name: Check database connection
        run: |
          curl -f "${{ secrets.SUPABASE_URL }}/rest/v1/" \
            -H "apikey: ${{ secrets.SUPABASE_ANON_KEY }}" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_ANON_KEY }}"