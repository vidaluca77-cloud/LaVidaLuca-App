version: '3.8'

services:
  # PostgreSQL Database for production
  postgres:
    image: postgres:15
    container_name: lavidaluca_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lavidaluca-prod-network
    restart: always

  # Redis for production
  redis:
    image: redis:7-alpine
    container_name: lavidaluca_redis_prod
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lavidaluca-prod-network
    restart: always

  # FastAPI Backend Production
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: lavidaluca_backend_prod
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lavidaluca-prod-network
    restart: always

volumes:
  postgres_prod_data:
  redis_prod_data:

networks:
  lavidaluca-prod-network:
    driver: bridge